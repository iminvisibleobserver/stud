1) 
#include <iostream>
using namespace std;


struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(nullptr) {}
};


ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
    
    ListNode* dummy = new ListNode(0);
    ListNode* current = dummy;

   
    while (list1 != nullptr && list2 != nullptr) {
        if (list1->val <= list2->val) {
            current->next = list1;
            list1 = list1->next;
        }
        else {
            current->next = list2;
            list2 = list2->next;
        }
        current = current->next;
    }

    
    if (list1 != nullptr) {
        current->next = list1;
    }
    else {
        current->next = list2;
    }

    
    return dummy->next;
}


void printList(ListNode* head) {
    while (head != nullptr) {
        cout << head->val << " ";
        head = head->next;
    }
    cout << endl;
}

int main() {
    
    ListNode* list1 = new ListNode(1);
    list1->next = new ListNode(2);
    list1->next->next = new ListNode(4);

    ListNode* list2 = new ListNode(1);
    list2->next = new ListNode(3);
    list2->next->next = new ListNode(4);

    ListNode* mergedList = mergeTwoLists(list1, list2);

    printList(mergedList);

    return 0;
}

2)

#include <iostream>
using namespace std;

struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(nullptr) {}
};

ListNode* deleteDuplicates(ListNode* head) {
    ListNode* current = head;

    while (current != nullptr && current->next != nullptr) {
        if (current->val == current->next->val) {
            current->next = current->next->next; 
        }
        else {
            current = current->next;
        }
    }

    return head;
}


void printList(ListNode* head) {
    while (head != nullptr) {
        cout << head->val << " ";
        head = head->next;
    }
    cout << endl;
}

int main() {

    ListNode* head1 = new ListNode(1);
    head1->next = new ListNode(1);
    head1->next->next = new ListNode(2);

    ListNode* head2 = new ListNode(1);
    head2->next = new ListNode(1);
    head2->next->next = new ListNode(2);
    head2->next->next->next = new ListNode(3);
    head2->next->next->next->next = new ListNode(3);

    ListNode* result1 = deleteDuplicates(head1);
    ListNode* result2 = deleteDuplicates(head2);
  
    printList(result1);
    printList(result2);

    return 0;
}

3)

#include <iostream>
using namespace std;

struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(nullptr) {}
};


bool hasCycle(ListNode* head) {
    if (head == nullptr) return false;

    ListNode* slow = head;  
    ListNode* fast = head; 

    
    while (fast != nullptr && fast->next != nullptr) {
        slow = slow->next;         
        fast = fast->next->next;   

        
        if (slow == fast) {
            return true;
        }
    }

    return false;  
}


void printList(ListNode* head) {
    while (head != nullptr) {
        cout << head->val << " ";
        head = head->next;
    }
    cout << endl;
}

int main() {
  
    ListNode* head1 = new ListNode(3);
    head1->next = new ListNode(2);
    head1->next->next = new ListNode(0);
    head1->next->next->next = new ListNode(-4);
    head1->next->next->next->next = head1->next; 

    
    ListNode* head2 = new ListNode(1);
    head2->next = new ListNode(2);
    head2->next->next = head2;  

   
    ListNode* head3 = new ListNode(1);

 
    cout << "Has cycle (list1): " << (hasCycle(head1) ? "true" : "false") << endl;
    cout << "Has cycle (list2): " << (hasCycle(head2) ? "true" : "false") << endl;
    cout << "Has cycle (list3): " << (hasCycle(head3) ? "true" : "false") << endl;

    return 0;
}

4)
#include <iostream>
using namespace std;


struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(nullptr) {}
};


ListNode* findMiddle(ListNode* head) {
    ListNode* slow = head;
    ListNode* fast = head;

    while (fast != nullptr && fast->next != nullptr) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}


ListNode* reverseList(ListNode* head) {
    ListNode* prev = nullptr;
    ListNode* curr = head;

    while (curr != nullptr) {
        ListNode* nextTemp = curr->next;
        curr->next = prev;
        prev = curr;
        curr = nextTemp;
    }

    return prev;
}


void reorderList(ListNode* head) {
    if (head == nullptr || head->next == nullptr) return;

    ListNode* middle = findMiddle(head);

    ListNode* second = middle->next;
    middle->next = nullptr; 

    second = reverseList(second);

    ListNode* first = head;
    while (second != nullptr) {
        ListNode* temp1 = first->next;
        ListNode* temp2 = second->next;

        first->next = second;
        second->next = temp1;

        first = temp1;
        second = temp2;
    }
}


void printList(ListNode* head) {
    while (head != nullptr) {
        cout << head->val << " ";
        head = head->next;
    }
    cout << endl;
}

int main() {

    ListNode* head1 = new ListNode(1);
    head1->next = new ListNode(2);
    head1->next->next = new ListNode(3);
    head1->next->next->next = new ListNode(4);

    ListNode* head2 = new ListNode(1);
    head2->next = new ListNode(2);
    head2->next->next = new ListNode(3);
    head2->next->next->next = new ListNode(4);
    head2->next->next->next->next = new ListNode(5);

    reorderList(head1);
    reorderList(head2);

  
    printList(head1);  
    printList(head2);  

    return 0;
}

5)
#include <iostream>
using namespace std;

struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(nullptr) {}
};

void deleteNode(ListNode* node) {
    node->val = node->next->val;


    ListNode* temp = node->next;
    node->next = node->next->next;

    delete temp;  
}

void printList(ListNode* head) {
    while (head != nullptr) {
        cout << head->val << " ";
        head = head->next;
    }
    cout << endl;
}

int main() {

    ListNode* head = new ListNode(4);
    head->next = new ListNode(5);
    head->next->next = new ListNode(1);
    head->next->next->next = new ListNode(9);

    
    ListNode* nodeToDelete = head->next;  
    deleteNode(nodeToDelete);

   
    printList(head); 


    nodeToDelete = head->next;  
    deleteNode(nodeToDelete);

    printList(head); 

    return 0;
}

6)
#include <iostream>
using namespace std;


struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(nullptr) {}
};


ListNode* doubleNumber(ListNode* head) {
    ListNode* curr = head;
    int carry = 0;

    while (curr != nullptr) {

        int newVal = curr->val * 2 + carry;

        curr->val = newVal % 10;  
        carry = newVal / 10;  

        if (curr->next == nullptr && carry > 0) {
          
            curr->next = new ListNode(carry);
            carry = 0;  
        }

        curr = curr->next;
    }

    return head;
}

void printList(ListNode* head) {
    while (head != nullptr) {
        cout << head->val << " ";
        head = head->next;
    }
    cout << endl;
}

int main() {
    
    ListNode* head = new ListNode(1);
    head->next = new ListNode(8);
    head->next->next = new ListNode(9);


    head = doubleNumber(head);

  
    printList(head);  


    ListNode* head2 = new ListNode(9);
    head2->next = new ListNode(9);
    head2->next->next = new ListNode(9);


    head2 = doubleNumber(head2);


    printList(head2);  

    return 0;
}

7)
#include <iostream>
#include <vector>
#include <queue>
using namespace std;


struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(nullptr) {}
};


struct compare {
    bool operator()(ListNode* l1, ListNode* l2) {
        return l1->val > l2->val; 
    }
};


ListNode* mergeKLists(vector<ListNode*>& lists) {
    priority_queue<ListNode*, vector<ListNode*>, compare> minHeap;

 
    for (auto list : lists) {
        if (list) {
            minHeap.push(list);
        }
    }

    ListNode* dummy = new ListNode(0);  
    ListNode* current = dummy;  

    while (!minHeap.empty()) {
        ListNode* node = minHeap.top();
        minHeap.pop();
        current->next = node;
        current = current->next;

        if (node->next) {
            minHeap.push(node->next);
        }
    }

    return dummy->next;  
}


void printList(ListNode* head) {
    while (head != nullptr) {
        cout << head->val << " ";
        head = head->next;
    }
    cout << endl;
}

int main() {
  
    ListNode* list1 = new ListNode(1);
    list1->next = new ListNode(4);
    list1->next->next = new ListNode(5);

    ListNode* list2 = new ListNode(1);
    list2->next = new ListNode(3);
    list2->next->next = new ListNode(4);

    ListNode* list3 = new ListNode(2);
    list3->next = new ListNode(6);


    vector<ListNode*> lists = { list1, list2, list3 };


    ListNode* mergedList = mergeKLists(lists);

    printList(mergedList);  

    return 0;
}

8)

#include <iostream>
using namespace std;

struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(nullptr) {}
};


ListNode* reverseGroup(ListNode* head, int k) {
    ListNode* prev = nullptr;
    ListNode* curr = head;
    ListNode* next = nullptr;
    int count = 0;

   
    while (curr != nullptr && count < k) {
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
        count++;
    }


    return prev;
}


ListNode* reverseKGroup(ListNode* head, int k) {
    ListNode* dummy = new ListNode(0); 
    dummy->next = head;
    ListNode* groupPrev = dummy;
    ListNode* groupEnd = head;

 
    while (groupEnd != nullptr) {
        
        for (int i = 1; i < k && groupEnd != nullptr; i++) {
            groupEnd = groupEnd->next;
        }

       
        if (groupEnd != nullptr) {
            ListNode* groupStart = groupPrev->next;
            ListNode* nextGroup = groupEnd->next;

           
            groupEnd->next = nullptr;  
            groupPrev->next = reverseGroup(groupStart, k);

           
            groupStart->next = nextGroup;
            groupPrev = groupStart;
            groupEnd = groupPrev->next;
        }
    }

    return dummy->next;  
}


void printList(ListNode* head) {
    while (head != nullptr) {
        cout << head->val << " ";
        head = head->next;
    }
    cout << endl;
}

int main() {

    ListNode* head = new ListNode(1);
    head->next = new ListNode(2);
    head->next->next = new ListNode(3);
    head->next->next->next = new ListNode(4);
    head->next->next->next->next = new ListNode(5);


    cout << "Original list: ";
    printList(head);

 
    ListNode* result = reverseKGroup(head, 2);

 
    cout << "List after reversing in groups of 2: ";
    printList(result);

    return 0;
}

9)
#include <iostream>
using namespace std;


struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(nullptr) {}
};


ListNode* partition(ListNode* head, int x) {
    ListNode* smallerHead = new ListNode(0); 
    ListNode* greaterHead = new ListNode(0); 
    ListNode* smaller = smallerHead;
    ListNode* greater = greaterHead;


    while (head != nullptr) {
        if (head->val < x) {
            smaller->next = head;  
            smaller = smaller->next;
        }
        else {
            greater->next = head;  
            greater = greater->next;
        }
        head = head->next;
    }

    greater->next = nullptr;

    smaller->next = greaterHead->next;


    return smallerHead->next;
}


void printList(ListNode* head) {
    while (head != nullptr) {
        cout << head->val << " ";
        head = head->next;
    }
    cout << endl;
}

int main() {

    ListNode* head = new ListNode(1);
    head->next = new ListNode(4);
    head->next->next = new ListNode(3);
    head->next->next->next = new ListNode(2);
    head->next->next->next->next = new ListNode(5);
    head->next->next->next->next->next = new ListNode(2);


    cout << "Original list: ";
    printList(head);


    ListNode* result = partition(head, 3);


    cout << "List after partitioning by 3: ";
    printList(result);

    return 0;
}
