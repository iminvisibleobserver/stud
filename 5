1)

#include <iostream>
using namespace std;


struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
     
        if (p == nullptr && q == nullptr) {
            return true;
        }

        
        if (p == nullptr || q == nullptr) {
            return false;
        }

        
        if (p->val != q->val) {
            return false;
        }

        
        return isSameTree(p->left, q->left) && isSameTree(p->right, q->right);
    }
};

int main() {
    Solution solution;

  
    TreeNode* p1 = new TreeNode(1);
    p1->left = new TreeNode(2);
    p1->right = new TreeNode(3);

    TreeNode* q1 = new TreeNode(1);
    q1->left = new TreeNode(2);
    q1->right = new TreeNode(3);

    cout << solution.isSameTree(p1, q1) << endl; 

    TreeNode* p2 = new TreeNode(1);
    p2->left = new TreeNode(2);

    TreeNode* q2 = new TreeNode(1);
    q2->right = new TreeNode(2);

    cout << solution.isSameTree(p2, q2) << endl;

    TreeNode* p3 = new TreeNode(1);
    p3->left = new TreeNode(2);
    p3->right = new TreeNode(1);

    TreeNode* q3 = new TreeNode(1);
    q3->left = new TreeNode(1);
    q3->right = new TreeNode(2);

    cout << solution.isSameTree(p3, q3) << endl;

    return 0;
}

2)

#include <iostream>
using namespace std;


struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if (root == nullptr) {
            return true; 
        }
        return isMirror(root->left, root->right); 
    }

    
    bool isMirror(TreeNode* t1, TreeNode* t2) {
       
        if (t1 == nullptr && t2 == nullptr) {
            return true;
        }
       
        if (t1 == nullptr || t2 == nullptr) {
            return false;
        }
       
        if (t1->val != t2->val) {
            return false;
        }
       
        return isMirror(t1->left, t2->right) && isMirror(t1->right, t2->left);
    }
};

int main() {
    Solution solution;


    TreeNode* root1 = new TreeNode(1);
    root1->left = new TreeNode(2);
    root1->right = new TreeNode(2);
    root1->left->left = new TreeNode(3);
    root1->left->right = new TreeNode(4);
    root1->right->left = new TreeNode(4);
    root1->right->right = new TreeNode(3);

    cout << solution.isSymmetric(root1) << endl;

 
    TreeNode* root2 = new TreeNode(1);
    root2->left = new TreeNode(2);
    root2->right = new TreeNode(2);
    root2->left->right = new TreeNode(3);
    root2->right->right = new TreeNode(3);

    cout << solution.isSymmetric(root2) << endl; 

    return 0;
}

3)

#include <iostream>
using namespace std;


struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
        if (root == nullptr) {
            return nullptr;  
        }

     
        TreeNode* left = invertTree(root->left);   
        TreeNode* right = invertTree(root->right); 

        
        root->left = right;
        root->right = left;

        return root;  
    }
};


void preorder(TreeNode* root) {
    if (root == nullptr) return;
    cout << root->val << " ";
    preorder(root->left);
    preorder(root->right);
}

int main() {
    Solution solution;


    TreeNode* root1 = new TreeNode(4);
    root1->left = new TreeNode(2);
    root1->right = new TreeNode(7);
    root1->left->left = new TreeNode(1);
    root1->left->right = new TreeNode(3);
    root1->right->left = new TreeNode(6);
    root1->right->right = new TreeNode(9);

    TreeNode* inverted1 = solution.invertTree(root1);
    preorder(inverted1);  
    cout << endl;

  
    TreeNode* root2 = new TreeNode(2);
    root2->left = new TreeNode(1);
    root2->right = new TreeNode(3);

    TreeNode* inverted2 = solution.invertTree(root2);
    preorder(inverted2); 
    cout << endl;

   
    TreeNode* root3 = nullptr;

    TreeNode* inverted3 = solution.invertTree(root3);
    preorder(inverted3);  
    cout << endl;

    return 0;
}

4)

#include <iostream>
#include <vector>
using namespace std;


struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

class Solution {
public:

    int count = 0;
    int result = 0;

    void inOrder(TreeNode* root, int k) {
        if (root == nullptr) {
            return;
        }

      
        inOrder(root->left, k);

        count++;
        if (count == k) {
            result = root->val;  
            return;  
        }

     
        inOrder(root->right, k);
    }

    int kthSmallest(TreeNode* root, int k) {
        inOrder(root, k);
        return result;
    }
};


void preorder(TreeNode* root) {
    if (root == nullptr) return;
    cout << root->val << " ";
    preorder(root->left);
    preorder(root->right);
}

int main() {
    Solution solution;

    
    TreeNode* root1 = new TreeNode(3);
    root1->left = new TreeNode(1);
    root1->right = new TreeNode(4);
    root1->left->right = new TreeNode(2);

    cout << "The 1st smallest element is: " << solution.kthSmallest(root1, 1) << endl; 

    
    TreeNode* root2 = new TreeNode(5);
    root2->left = new TreeNode(3);
    root2->right = new TreeNode(6);
    root2->left->left = new TreeNode(2);
    root2->left->right = new TreeNode(4);
    root2->left->left->left = new TreeNode(1);

    cout << "The 3rd smallest element is: " << solution.kthSmallest(root2, 3) << endl;  

    return 0;
}

5)

#include <iostream>
#include <sstream>
#include <string>
#include <queue>
using namespace std;


struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

class Codec {
public:
   
    string serialize(TreeNode* root) {
        if (!root) return "#";  
        string result = to_string(root->val);  
        result += "," + serialize(root->left);  
        result += "," + serialize(root->right); 
        return result;
    }

   
    TreeNode* deserialize(string data) {
        stringstream ss(data);  
        return deserializeHelper(ss);  
    }

private:
    
    TreeNode* deserializeHelper(stringstream& ss) {
        string val;
        getline(ss, val, ',');  
        if (val == "#") return nullptr;  
        TreeNode* node = new TreeNode(stoi(val));  
        node->left = deserializeHelper(ss);  
        node->right = deserializeHelper(ss); 
        return node;
    }
};


void preorder(TreeNode* root) {
    if (!root) return;
    cout << root->val << " ";
    preorder(root->left);
    preorder(root->right);
}

int main() {
    Codec codec;

  
    TreeNode* root1 = new TreeNode(1);
    root1->left = new TreeNode(2);
    root1->right = new TreeNode(3);
    root1->right->left = new TreeNode(4);
    root1->right->right = new TreeNode(5);

    string serialized = codec.serialize(root1);
    cout << "Serialized Tree: " << serialized << endl;


    TreeNode* deserialized = codec.deserialize(serialized);
    cout << "Deserialized Tree (Preorder Traversal): ";
    preorder(deserialized);
    cout << endl;


    TreeNode* root2 = nullptr;


    serialized = codec.serialize(root2);
    cout << "Serialized Tree: " << serialized << endl;


    deserialized = codec.deserialize(serialized);
    cout << "Deserialized Tree (Preorder Traversal): ";
    preorder(deserialized);
    cout << endl;

    return 0;
}

6)


