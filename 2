#include <iostream>


struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(nullptr) {}
};


ListNode* swapPairs(ListNode* head) {
    
    ListNode dummy(0);
    dummy.next = head;
    ListNode* prev = &dummy;

    while (prev->next != nullptr && prev->next->next != nullptr) {
        
        ListNode* first = prev->next;
        ListNode* second = first->next;

       
        first->next = second->next;
        second->next = first;
        prev->next = second;

      
        prev = first;
    }

   
    return dummy.next;
}


ListNode* createList(int arr[], int size) {
    if (size == 0) return nullptr;
    ListNode* head = new ListNode(arr[0]);
    ListNode* current = head;
    for (int i = 1; i < size; ++i) {
        current->next = new ListNode(arr[i]);
        current = current->next;
    }
    return head;
}

// Функція для виведення зв'язаного списку
void printList(ListNode* head) {
    while (head != nullptr) {
        std::cout << head->val << " ";
        head = head->next;
    }
    std::cout << std::endl;
}


int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int size = sizeof(arr) / sizeof(arr[0]);

    
    ListNode* head = createList(arr, size);

    std::cout << "Original list: ";
    printList(head);

    
    ListNode* swappedHead = swapPairs(head);

    std::cout << "List after swap: ";
    printList(swappedHead);

    return 0;
}
